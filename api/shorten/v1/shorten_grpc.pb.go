// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.2
// source: v1/shorten.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShortenClient is the client API for Shorten service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenClient interface {
	CreateShortenURL(ctx context.Context, in *CreateShortenURLRequest, opts ...grpc.CallOption) (*CreateShortenURLReply, error)
	DeleteShortenURL(ctx context.Context, in *DeleteShortenURLRequest, opts ...grpc.CallOption) (*DeleteShortenURLReply, error)
	GetShortenURL(ctx context.Context, in *GetShortenURLRequest, opts ...grpc.CallOption) (*GetShortenURLReply, error)
	ListShortenURL(ctx context.Context, in *ListShortenURLRequest, opts ...grpc.CallOption) (*ListShortenURLReply, error)
	DecodeShortenURL(ctx context.Context, in *DecodeShortenURLRequest, opts ...grpc.CallOption) (*DecodeShortenURLReply, error)
}

type shortenClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenClient(cc grpc.ClientConnInterface) ShortenClient {
	return &shortenClient{cc}
}

func (c *shortenClient) CreateShortenURL(ctx context.Context, in *CreateShortenURLRequest, opts ...grpc.CallOption) (*CreateShortenURLReply, error) {
	out := new(CreateShortenURLReply)
	err := c.cc.Invoke(ctx, "/mowen.api.url_shorten.shorten.v1.Shorten/CreateShortenURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenClient) DeleteShortenURL(ctx context.Context, in *DeleteShortenURLRequest, opts ...grpc.CallOption) (*DeleteShortenURLReply, error) {
	out := new(DeleteShortenURLReply)
	err := c.cc.Invoke(ctx, "/mowen.api.url_shorten.shorten.v1.Shorten/DeleteShortenURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenClient) GetShortenURL(ctx context.Context, in *GetShortenURLRequest, opts ...grpc.CallOption) (*GetShortenURLReply, error) {
	out := new(GetShortenURLReply)
	err := c.cc.Invoke(ctx, "/mowen.api.url_shorten.shorten.v1.Shorten/GetShortenURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenClient) ListShortenURL(ctx context.Context, in *ListShortenURLRequest, opts ...grpc.CallOption) (*ListShortenURLReply, error) {
	out := new(ListShortenURLReply)
	err := c.cc.Invoke(ctx, "/mowen.api.url_shorten.shorten.v1.Shorten/ListShortenURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenClient) DecodeShortenURL(ctx context.Context, in *DecodeShortenURLRequest, opts ...grpc.CallOption) (*DecodeShortenURLReply, error) {
	out := new(DecodeShortenURLReply)
	err := c.cc.Invoke(ctx, "/mowen.api.url_shorten.shorten.v1.Shorten/DecodeShortenURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenServer is the server API for Shorten service.
// All implementations must embed UnimplementedShortenServer
// for forward compatibility
type ShortenServer interface {
	CreateShortenURL(context.Context, *CreateShortenURLRequest) (*CreateShortenURLReply, error)
	DeleteShortenURL(context.Context, *DeleteShortenURLRequest) (*DeleteShortenURLReply, error)
	GetShortenURL(context.Context, *GetShortenURLRequest) (*GetShortenURLReply, error)
	ListShortenURL(context.Context, *ListShortenURLRequest) (*ListShortenURLReply, error)
	DecodeShortenURL(context.Context, *DecodeShortenURLRequest) (*DecodeShortenURLReply, error)
	mustEmbedUnimplementedShortenServer()
}

// UnimplementedShortenServer must be embedded to have forward compatible implementations.
type UnimplementedShortenServer struct {
}

func (UnimplementedShortenServer) CreateShortenURL(context.Context, *CreateShortenURLRequest) (*CreateShortenURLReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortenURL not implemented")
}
func (UnimplementedShortenServer) DeleteShortenURL(context.Context, *DeleteShortenURLRequest) (*DeleteShortenURLReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShortenURL not implemented")
}
func (UnimplementedShortenServer) GetShortenURL(context.Context, *GetShortenURLRequest) (*GetShortenURLReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortenURL not implemented")
}
func (UnimplementedShortenServer) ListShortenURL(context.Context, *ListShortenURLRequest) (*ListShortenURLReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShortenURL not implemented")
}
func (UnimplementedShortenServer) DecodeShortenURL(context.Context, *DecodeShortenURLRequest) (*DecodeShortenURLReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodeShortenURL not implemented")
}
func (UnimplementedShortenServer) mustEmbedUnimplementedShortenServer() {}

// UnsafeShortenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenServer will
// result in compilation errors.
type UnsafeShortenServer interface {
	mustEmbedUnimplementedShortenServer()
}

func RegisterShortenServer(s grpc.ServiceRegistrar, srv ShortenServer) {
	s.RegisterService(&Shorten_ServiceDesc, srv)
}

func _Shorten_CreateShortenURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortenURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenServer).CreateShortenURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mowen.api.url_shorten.shorten.v1.Shorten/CreateShortenURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenServer).CreateShortenURL(ctx, req.(*CreateShortenURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shorten_DeleteShortenURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShortenURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenServer).DeleteShortenURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mowen.api.url_shorten.shorten.v1.Shorten/DeleteShortenURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenServer).DeleteShortenURL(ctx, req.(*DeleteShortenURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shorten_GetShortenURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortenURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenServer).GetShortenURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mowen.api.url_shorten.shorten.v1.Shorten/GetShortenURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenServer).GetShortenURL(ctx, req.(*GetShortenURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shorten_ListShortenURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShortenURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenServer).ListShortenURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mowen.api.url_shorten.shorten.v1.Shorten/ListShortenURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenServer).ListShortenURL(ctx, req.(*ListShortenURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shorten_DecodeShortenURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodeShortenURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenServer).DecodeShortenURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mowen.api.url_shorten.shorten.v1.Shorten/DecodeShortenURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenServer).DecodeShortenURL(ctx, req.(*DecodeShortenURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shorten_ServiceDesc is the grpc.ServiceDesc for Shorten service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shorten_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mowen.api.url_shorten.shorten.v1.Shorten",
	HandlerType: (*ShortenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShortenURL",
			Handler:    _Shorten_CreateShortenURL_Handler,
		},
		{
			MethodName: "DeleteShortenURL",
			Handler:    _Shorten_DeleteShortenURL_Handler,
		},
		{
			MethodName: "GetShortenURL",
			Handler:    _Shorten_GetShortenURL_Handler,
		},
		{
			MethodName: "ListShortenURL",
			Handler:    _Shorten_ListShortenURL_Handler,
		},
		{
			MethodName: "DecodeShortenURL",
			Handler:    _Shorten_DecodeShortenURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/shorten.proto",
}
