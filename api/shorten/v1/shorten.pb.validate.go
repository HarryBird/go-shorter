// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/shorten.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DecodeShortenURLRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DecodeShortenURLRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DecodeShortenURLRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DecodeShortenURLRequestMultiError, or nil if none found.
func (m *DecodeShortenURLRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DecodeShortenURLRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := DecodeShortenURLRequestValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DecodeShortenURLRequestMultiError(errors)
	}

	return nil
}

// DecodeShortenURLRequestMultiError is an error wrapping multiple validation
// errors returned by DecodeShortenURLRequest.ValidateAll() if the designated
// constraints aren't met.
type DecodeShortenURLRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DecodeShortenURLRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DecodeShortenURLRequestMultiError) AllErrors() []error { return m }

// DecodeShortenURLRequestValidationError is the validation error returned by
// DecodeShortenURLRequest.Validate if the designated constraints aren't met.
type DecodeShortenURLRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecodeShortenURLRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecodeShortenURLRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecodeShortenURLRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecodeShortenURLRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecodeShortenURLRequestValidationError) ErrorName() string {
	return "DecodeShortenURLRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DecodeShortenURLRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecodeShortenURLRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecodeShortenURLRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecodeShortenURLRequestValidationError{}

// Validate checks the field values on DecodeShortenURLReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DecodeShortenURLReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DecodeShortenURLReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DecodeShortenURLReplyMultiError, or nil if none found.
func (m *DecodeShortenURLReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DecodeShortenURLReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UrlFull

	if len(errors) > 0 {
		return DecodeShortenURLReplyMultiError(errors)
	}

	return nil
}

// DecodeShortenURLReplyMultiError is an error wrapping multiple validation
// errors returned by DecodeShortenURLReply.ValidateAll() if the designated
// constraints aren't met.
type DecodeShortenURLReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DecodeShortenURLReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DecodeShortenURLReplyMultiError) AllErrors() []error { return m }

// DecodeShortenURLReplyValidationError is the validation error returned by
// DecodeShortenURLReply.Validate if the designated constraints aren't met.
type DecodeShortenURLReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecodeShortenURLReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecodeShortenURLReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecodeShortenURLReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecodeShortenURLReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecodeShortenURLReplyValidationError) ErrorName() string {
	return "DecodeShortenURLReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DecodeShortenURLReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecodeShortenURLReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecodeShortenURLReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecodeShortenURLReplyValidationError{}

// Validate checks the field values on CreateShortenURLRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShortenURLRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShortenURLRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShortenURLRequestMultiError, or nil if none found.
func (m *CreateShortenURLRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShortenURLRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_CreateShortenURLRequest_Url_Pattern.MatchString(m.GetUrl()) {
		err := CreateShortenURLRequestValidationError{
			field:  "Url",
			reason: "value does not match regex pattern \"^(http|https)://\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateShortenURLRequestMultiError(errors)
	}

	return nil
}

// CreateShortenURLRequestMultiError is an error wrapping multiple validation
// errors returned by CreateShortenURLRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateShortenURLRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShortenURLRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShortenURLRequestMultiError) AllErrors() []error { return m }

// CreateShortenURLRequestValidationError is the validation error returned by
// CreateShortenURLRequest.Validate if the designated constraints aren't met.
type CreateShortenURLRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShortenURLRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShortenURLRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShortenURLRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShortenURLRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShortenURLRequestValidationError) ErrorName() string {
	return "CreateShortenURLRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShortenURLRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShortenURLRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShortenURLRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShortenURLRequestValidationError{}

var _CreateShortenURLRequest_Url_Pattern = regexp.MustCompile("^(http|https)://")

// Validate checks the field values on CreateShortenURLReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShortenURLReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShortenURLReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShortenURLReplyMultiError, or nil if none found.
func (m *CreateShortenURLReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShortenURLReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShortUrl

	if len(errors) > 0 {
		return CreateShortenURLReplyMultiError(errors)
	}

	return nil
}

// CreateShortenURLReplyMultiError is an error wrapping multiple validation
// errors returned by CreateShortenURLReply.ValidateAll() if the designated
// constraints aren't met.
type CreateShortenURLReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShortenURLReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShortenURLReplyMultiError) AllErrors() []error { return m }

// CreateShortenURLReplyValidationError is the validation error returned by
// CreateShortenURLReply.Validate if the designated constraints aren't met.
type CreateShortenURLReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShortenURLReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShortenURLReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShortenURLReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShortenURLReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShortenURLReplyValidationError) ErrorName() string {
	return "CreateShortenURLReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShortenURLReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShortenURLReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShortenURLReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShortenURLReplyValidationError{}

// Validate checks the field values on DeleteShortenURLRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteShortenURLRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteShortenURLRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteShortenURLRequestMultiError, or nil if none found.
func (m *DeleteShortenURLRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteShortenURLRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteShortenURLRequestMultiError(errors)
	}

	return nil
}

// DeleteShortenURLRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteShortenURLRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteShortenURLRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteShortenURLRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteShortenURLRequestMultiError) AllErrors() []error { return m }

// DeleteShortenURLRequestValidationError is the validation error returned by
// DeleteShortenURLRequest.Validate if the designated constraints aren't met.
type DeleteShortenURLRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShortenURLRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShortenURLRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShortenURLRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShortenURLRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShortenURLRequestValidationError) ErrorName() string {
	return "DeleteShortenURLRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShortenURLRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShortenURLRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShortenURLRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShortenURLRequestValidationError{}

// Validate checks the field values on DeleteShortenURLReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteShortenURLReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteShortenURLReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteShortenURLReplyMultiError, or nil if none found.
func (m *DeleteShortenURLReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteShortenURLReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteShortenURLReplyMultiError(errors)
	}

	return nil
}

// DeleteShortenURLReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteShortenURLReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteShortenURLReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteShortenURLReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteShortenURLReplyMultiError) AllErrors() []error { return m }

// DeleteShortenURLReplyValidationError is the validation error returned by
// DeleteShortenURLReply.Validate if the designated constraints aren't met.
type DeleteShortenURLReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShortenURLReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShortenURLReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShortenURLReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShortenURLReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShortenURLReplyValidationError) ErrorName() string {
	return "DeleteShortenURLReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShortenURLReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShortenURLReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShortenURLReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShortenURLReplyValidationError{}

// Validate checks the field values on GetShortenURLRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShortenURLRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShortenURLRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShortenURLRequestMultiError, or nil if none found.
func (m *GetShortenURLRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShortenURLRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetShortenURLRequestMultiError(errors)
	}

	return nil
}

// GetShortenURLRequestMultiError is an error wrapping multiple validation
// errors returned by GetShortenURLRequest.ValidateAll() if the designated
// constraints aren't met.
type GetShortenURLRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShortenURLRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShortenURLRequestMultiError) AllErrors() []error { return m }

// GetShortenURLRequestValidationError is the validation error returned by
// GetShortenURLRequest.Validate if the designated constraints aren't met.
type GetShortenURLRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShortenURLRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShortenURLRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShortenURLRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShortenURLRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShortenURLRequestValidationError) ErrorName() string {
	return "GetShortenURLRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetShortenURLRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShortenURLRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShortenURLRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShortenURLRequestValidationError{}

// Validate checks the field values on GetShortenURLReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShortenURLReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShortenURLReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetShortenURLReplyMultiError, or nil if none found.
func (m *GetShortenURLReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShortenURLReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetShortenURLReplyMultiError(errors)
	}

	return nil
}

// GetShortenURLReplyMultiError is an error wrapping multiple validation errors
// returned by GetShortenURLReply.ValidateAll() if the designated constraints
// aren't met.
type GetShortenURLReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShortenURLReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShortenURLReplyMultiError) AllErrors() []error { return m }

// GetShortenURLReplyValidationError is the validation error returned by
// GetShortenURLReply.Validate if the designated constraints aren't met.
type GetShortenURLReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShortenURLReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShortenURLReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShortenURLReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShortenURLReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShortenURLReplyValidationError) ErrorName() string {
	return "GetShortenURLReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetShortenURLReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShortenURLReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShortenURLReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShortenURLReplyValidationError{}

// Validate checks the field values on ListShortenURLRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListShortenURLRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListShortenURLRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListShortenURLRequestMultiError, or nil if none found.
func (m *ListShortenURLRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListShortenURLRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListShortenURLRequestMultiError(errors)
	}

	return nil
}

// ListShortenURLRequestMultiError is an error wrapping multiple validation
// errors returned by ListShortenURLRequest.ValidateAll() if the designated
// constraints aren't met.
type ListShortenURLRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListShortenURLRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListShortenURLRequestMultiError) AllErrors() []error { return m }

// ListShortenURLRequestValidationError is the validation error returned by
// ListShortenURLRequest.Validate if the designated constraints aren't met.
type ListShortenURLRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShortenURLRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShortenURLRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShortenURLRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShortenURLRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShortenURLRequestValidationError) ErrorName() string {
	return "ListShortenURLRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListShortenURLRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShortenURLRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShortenURLRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShortenURLRequestValidationError{}

// Validate checks the field values on ListShortenURLReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListShortenURLReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListShortenURLReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListShortenURLReplyMultiError, or nil if none found.
func (m *ListShortenURLReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListShortenURLReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListShortenURLReplyMultiError(errors)
	}

	return nil
}

// ListShortenURLReplyMultiError is an error wrapping multiple validation
// errors returned by ListShortenURLReply.ValidateAll() if the designated
// constraints aren't met.
type ListShortenURLReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListShortenURLReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListShortenURLReplyMultiError) AllErrors() []error { return m }

// ListShortenURLReplyValidationError is the validation error returned by
// ListShortenURLReply.Validate if the designated constraints aren't met.
type ListShortenURLReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShortenURLReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShortenURLReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShortenURLReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShortenURLReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShortenURLReplyValidationError) ErrorName() string {
	return "ListShortenURLReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListShortenURLReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShortenURLReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShortenURLReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShortenURLReplyValidationError{}
