// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type GatewayHTTPServer interface {
	DecodeURL(context.Context, *DecodeURLRequest) (*DecodeURLReply, error)
	ShortenURL(context.Context, *ShortenURLRequest) (*ShortenURLReply, error)
}

func RegisterGatewayHTTPServer(s *http.Server, srv GatewayHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/url/shorten", _Gateway_ShortenURL0_HTTP_Handler(srv))
	r.GET("/v1/url/decode", _Gateway_DecodeURL0_HTTP_Handler(srv))
}

func _Gateway_ShortenURL0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ShortenURLRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/mowen.api.url_shorten.gateway.v1.Gateway/ShortenURL")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ShortenURL(ctx, req.(*ShortenURLRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ShortenURLReply)
		return ctx.Result(200, reply)
	}
}

func _Gateway_DecodeURL0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DecodeURLRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/mowen.api.url_shorten.gateway.v1.Gateway/DecodeURL")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DecodeURL(ctx, req.(*DecodeURLRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DecodeURLReply)
		return ctx.Result(200, reply)
	}
}

type GatewayHTTPClient interface {
	DecodeURL(ctx context.Context, req *DecodeURLRequest, opts ...http.CallOption) (rsp *DecodeURLReply, err error)
	ShortenURL(ctx context.Context, req *ShortenURLRequest, opts ...http.CallOption) (rsp *ShortenURLReply, err error)
}

type GatewayHTTPClientImpl struct {
	cc *http.Client
}

func NewGatewayHTTPClient(client *http.Client) GatewayHTTPClient {
	return &GatewayHTTPClientImpl{client}
}

func (c *GatewayHTTPClientImpl) DecodeURL(ctx context.Context, in *DecodeURLRequest, opts ...http.CallOption) (*DecodeURLReply, error) {
	var out DecodeURLReply
	pattern := "/v1/url/decode"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/mowen.api.url_shorten.gateway.v1.Gateway/DecodeURL"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GatewayHTTPClientImpl) ShortenURL(ctx context.Context, in *ShortenURLRequest, opts ...http.CallOption) (*ShortenURLReply, error) {
	var out ShortenURLReply
	pattern := "/v1/url/shorten"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/mowen.api.url_shorten.gateway.v1.Gateway/ShortenURL"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
