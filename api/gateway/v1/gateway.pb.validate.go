// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/gateway.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ShortenURLRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShortenURLRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShortenURLRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShortenURLRequestMultiError, or nil if none found.
func (m *ShortenURLRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ShortenURLRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_ShortenURLRequest_Url_Pattern.MatchString(m.GetUrl()) {
		err := ShortenURLRequestValidationError{
			field:  "Url",
			reason: "value does not match regex pattern \"^(http|https)://\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ShortenURLRequestMultiError(errors)
	}

	return nil
}

// ShortenURLRequestMultiError is an error wrapping multiple validation errors
// returned by ShortenURLRequest.ValidateAll() if the designated constraints
// aren't met.
type ShortenURLRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShortenURLRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShortenURLRequestMultiError) AllErrors() []error { return m }

// ShortenURLRequestValidationError is the validation error returned by
// ShortenURLRequest.Validate if the designated constraints aren't met.
type ShortenURLRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShortenURLRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShortenURLRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShortenURLRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShortenURLRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShortenURLRequestValidationError) ErrorName() string {
	return "ShortenURLRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ShortenURLRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShortenURLRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShortenURLRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShortenURLRequestValidationError{}

var _ShortenURLRequest_Url_Pattern = regexp.MustCompile("^(http|https)://")

// Validate checks the field values on ShortenURLReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShortenURLReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShortenURLReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShortenURLReplyMultiError, or nil if none found.
func (m *ShortenURLReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ShortenURLReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return ShortenURLReplyMultiError(errors)
	}

	return nil
}

// ShortenURLReplyMultiError is an error wrapping multiple validation errors
// returned by ShortenURLReply.ValidateAll() if the designated constraints
// aren't met.
type ShortenURLReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShortenURLReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShortenURLReplyMultiError) AllErrors() []error { return m }

// ShortenURLReplyValidationError is the validation error returned by
// ShortenURLReply.Validate if the designated constraints aren't met.
type ShortenURLReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShortenURLReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShortenURLReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShortenURLReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShortenURLReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShortenURLReplyValidationError) ErrorName() string { return "ShortenURLReplyValidationError" }

// Error satisfies the builtin error interface
func (e ShortenURLReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShortenURLReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShortenURLReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShortenURLReplyValidationError{}

// Validate checks the field values on DecodeURLRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DecodeURLRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DecodeURLRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DecodeURLRequestMultiError, or nil if none found.
func (m *DecodeURLRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DecodeURLRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DecodeURLRequestMultiError(errors)
	}

	return nil
}

// DecodeURLRequestMultiError is an error wrapping multiple validation errors
// returned by DecodeURLRequest.ValidateAll() if the designated constraints
// aren't met.
type DecodeURLRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DecodeURLRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DecodeURLRequestMultiError) AllErrors() []error { return m }

// DecodeURLRequestValidationError is the validation error returned by
// DecodeURLRequest.Validate if the designated constraints aren't met.
type DecodeURLRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecodeURLRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecodeURLRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecodeURLRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecodeURLRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecodeURLRequestValidationError) ErrorName() string { return "DecodeURLRequestValidationError" }

// Error satisfies the builtin error interface
func (e DecodeURLRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecodeURLRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecodeURLRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecodeURLRequestValidationError{}

// Validate checks the field values on DecodeURLReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DecodeURLReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DecodeURLReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DecodeURLReplyMultiError,
// or nil if none found.
func (m *DecodeURLReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DecodeURLReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DecodeURLReplyMultiError(errors)
	}

	return nil
}

// DecodeURLReplyMultiError is an error wrapping multiple validation errors
// returned by DecodeURLReply.ValidateAll() if the designated constraints
// aren't met.
type DecodeURLReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DecodeURLReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DecodeURLReplyMultiError) AllErrors() []error { return m }

// DecodeURLReplyValidationError is the validation error returned by
// DecodeURLReply.Validate if the designated constraints aren't met.
type DecodeURLReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecodeURLReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecodeURLReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecodeURLReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecodeURLReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecodeURLReplyValidationError) ErrorName() string { return "DecodeURLReplyValidationError" }

// Error satisfies the builtin error interface
func (e DecodeURLReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecodeURLReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecodeURLReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecodeURLReplyValidationError{}
